name: Deploy

on:
  workflow_dispatch:
    inputs:
      app:
        description: "Application to deploy"
        required: true
        type: choice
        options:
          - server
          - client
      tag:
        description: "Tag to deploy"
        required: true
        default: "latest"
      environment:
        description: "Environment to deploy"
        required: true
        default: production
        type: environment
  repository_dispatch:
    types: [docker_image_published]

env:
  PYTHON_VERSION: "3.12"
  IMAGE_NAME: "ghcr.io/astro5-strapi5-example"
  DEPLOY_DIR: "deploy"
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      app: ${{ github.event_name == 'workflow_dispatch' && inputs.app || github.event.client_payload.app }}
      tag: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.event.client_payload.tag }}
      environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
    steps:
      - run: echo "Preparing deployment envrionment"
  deploy:
    runs-on: ubuntu-latest
    needs: prepare
    env:
      ANSIBLE_PRIVATE_KEY_FILE: /home/runner/.ssh/deploy_key
      ANSIBLE_VAULT_PASSWORD_FILE: ${{ github.workspace }}/deploy/.vault_pass.txt
      ANSIBLE_INVENTORY: inventory/${{ needs.prepare.outputs.environment }}/inventory.ini
    environment:
      name: ${{ needs.prepare.outputs.environment }}
      url: ${{ needs.prepare.outputs.app == 'client' && 'https://monorepodeploy.brunopaz.xyz' || 'https://strapi-monorepodeploy.brunopaz.xyz' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Python dependencies
        working-directory: ${{ env.DEPLOY_DIR }}
        run: |
          pip install -r requirements.txt

      - name: Install Galaxy Roles
        working-directory: ${{ env.DEPLOY_DIR }}
        run: |
          ansible-galaxy install -r requirements.yml

      - name: Setup SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
          SSH_DEPLOY_KEY_FILE: ${{ env.ANSIBLE_PRIVATE_KEY_FILE }}
        run: |
          mkdir -p /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" > "$SSH_DEPLOY_KEY_FILE"
          chmod 600 "$SSH_DEPLOY_KEY_FILE"

      - name: Setup Ansible Vault password
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASS }}" > ${{ env.ANSIBLE_VAULT_PASSWORD_FILE }}
          chmod 600 ${{ env.ANSIBLE_VAULT_PASSWORD_FILE }}

      - name: Write app version to ansible vars (server)
        if: ${{ needs.prepare.outputs.app == 'server' }}
        run: |
          sed -i "s/^strapi_image_tag: .*/strapi_image_tag: ${{ needs.prepare.outputs.tag }}/" ${{ env.DEPLOY_DIR }}/inventory/${{ needs.prepare.outputs.environment }}/group_vars/all.yml
          cat ${{ env.DEPLOY_DIR }}/inventory/${{ needs.prepare.outputs.environment }}/group_vars/all.yml

      - name: Write app version to ansible vars (client)
        if: ${{ needs.prepare.outputs.app == 'client' }}
        run: |
          sed -i "s/^app_version: .*/app_version: client-${{ needs.prepare.outputs.tag }}/" ${{ env.DEPLOY_DIR }}/inventory/${{ needs.prepare.outputs.environment }}/group_vars/all.yml
          cat ${{ env.DEPLOY_DIR }}/inventory/${{ needs.prepare.outputs.environment }}/group_vars/all.yml

      - name: Run Ansible playbook
        working-directory: ${{ env.DEPLOY_DIR }}
        run: |
          ansible-playbook site.yml

      - name: Commit updated versions
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: "chore(deploy): [skip-ci] bump ${{ needs.prepare.outputs.app }} to ${{ needs.prepare.outputs.tag }}"
          file_pattern: "deploy/inventory/${{ needs.prepare.outputs.environment }}/group_vars/all.yml"
